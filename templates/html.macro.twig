{% macro link(label, url, icon, title) %}
    {% apply spaceless %}
        <a href="{{ url }}" {% if title %}title="{{ title }}"{% endif %}>
            {% if icon %}
                {% if icon == 'view' %}{% set icon = 'search' %}{% endif %}
                {% if icon == 'add' %}{% set icon = 'plus' %}{% endif %}
                {% if icon == 'edit' %}{% set icon = 'pencil' %}{% endif %}
                {% if icon == 'delete' %}{% set icon = 'remove' %}{% endif %}
                {% if icon == 'close' %}{% set icon = 'lock' %}{% endif %}
                {% if icon == 'reopen' %}{% set icon = 'reset' %}{% endif %}
                {% if icon == 'download' %}{% set icon = 'download-alt' %}{% endif %}
                {% if icon == 'cancel' %}{% set icon = 'arrow-left' %}{% endif %}
                {% if icon == 'connect' %}{% set icon = 'paperclip' %}{% endif %}
                {% if icon == 'email' %}{% set icon = 'envelope' %}{% endif %}
                {% if icon == 'all' %}{% set icon = 'modal-window' %}{% endif %}
                {% if icon == 'list' %}{% set icon = 'th-list' %}{% endif %}
                <span class="glyphicon glyphicon-{{ icon }}" aria-hidden="true"></span>
            {% endif %}
            {% if label %}
                {{ label }}
            {% endif %}
        </a>
    {% endapply %}
{% endmacro %}

{% macro iconLink(url, icon, title) %}
    {{ _self.link(null, url, icon, title) }}
{% endmacro %}

{% macro viewLink(url) %}
    {{ _self.iconLink(url, 'view', 'Bekijken') }}
{% endmacro %}

{% macro addLink(url) %}
    {{ _self.iconLink(url, 'add', 'Toevoegen') }}
{% endmacro %}

{% macro editLink(url) %}
    {{ _self.iconLink(url, 'edit', 'Wijzigen') }}
{% endmacro %}

{% macro deleteLink(url) %}
    {{ _self.iconLink(url, 'delete', 'Verwijderen') }}
{% endmacro %}

{% macro closeLink(url) %}
    {{ _self.iconLink(url, 'close', 'Afsluiten') }}
{% endmacro %}

{% macro downloadLink(url) %}
    {{ _self.iconLink(url, 'download', 'Downloaden') }}
{% endmacro %}

{% macro cancelLink(url) %}
    {{ _self.iconLink(url, 'cancel', 'Annuleren') }}
{% endmacro %}

{% macro connectLink(url) %}
    {{ _self.iconLink(url, 'connect', 'Koppelen') }}
{% endmacro %}

{% macro emailLink(url) %}
    {{ _self.iconLink(url, 'email', 'E-mailen') }}
{% endmacro %}

{% macro navLink(label, url, active) %}
    <li role="presentation" class="{{ active ? "active" }}">
        <a href="{{ url }}" >{{ label }}</a>
    </li>
{% endmacro %}

{% macro revisionsLink(entity, label = false) %}
    {% if is_granted('CONTROLLER_APP_REVISIONS') %}
            {% set url = path('app_revisions_index', {'class': class(entity), 'id': entity.id}) %}
        {% if label %}
            {{ _self.link('Revisies', url, 'list') }}
        {% else %}
            {{ _self.iconLink(url, 'list', 'Revisies') }}
        {% endif %}
    {% endif %}
{% endmacro %}

{% macro tick() %}
    <span class="glyphicon glyphicon-ok" aria-hidden="true"></span>
{% endmacro %}

{% macro modalPaste(title, onclick) %}
<!-- Modal HTML -->
<div id="modalPaste" class="modal fade" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">{{ title }}</h5>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <textarea id="pasteValue" class="form-control" rows="8"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Annuleren</button>
                <button type="button" class="btn btn-primary" onclick="{{ onclick }}">Ga</button>
            </div>
        </div>
    </div>
</div>
{% endmacro %}

{% macro calendar(title,indexPath,entityId) %}
    {% set modalWindowId = title|lower ~"Id" %}
    <script>
        var calendarEventData = {
            indexUrl: "{{ indexPath }}",
            entityId: "{{ entityId }}",
            modalWindowId: "{{ modalWindowId }}"
        }
    </script>
    <div id="calendar-holder" data-events-url="{{ path('fc_load_events') }}" data-calendar-id="villa-slapers" data-entity-id="{{ entityId }}" >

    </div>
    {{ _self.modalWindow(modalWindowId,title) }}

    {{ encore_entry_link_tags('calendar') }}
    {{ encore_entry_script_tags('calendar') }}

{% endmacro %}
{% macro modalWindow(modalWindowId,title) %}
<!-- Modal -->

<div class="modal fade" id="{{ modalWindowId }}" tabindex="-1" role="dialog" aria-labelledby="eventModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">{{ title }}</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

            </div>
            <div class="modal-footer">
                <button type="button" id="sluiten" class="btn btn-secondary" data-dismiss="modal">Sluiten</button>
            </div>
        </div>
    </div>
</div>

{% endmacro %}

{% macro fieldsetToggle(fieldsetName,toggleId, autoInit = false) %}
    {% block script %}
        <script>
            let fieldsetName = '{{ fieldsetName }}';
            let toggleId = '#{{ toggleId }}';
            let fieldset = $('form fieldset[name="{{ fieldsetName }}"]').first();

            //init onChange method
            $(toggleId).on('change', function(){
                toggleFieldset(fieldset);
            });

            /**
             * If one of the children input types contains a value, (that is, checked, something selected or an input text value)
             * It is considered to be initialized as 'show this fieldset' as it has been filled before
             * and therefore it is meant to be shown.
             */
            function autoInit()
            {

                let childrenInput = fieldset.find("input");
                childrenInput.each(function(pos,elm) {
                    switch ($(elm).attr('type')) {
                        case "text":
                            if ($(toggleId).val()) return false;
                            break;
                        case "checkbox":
                            if ($(toggleId).prop('checked')) return false;
                            break;
                    }
                });

                let childrenSelect = fieldset.find("select").children("option");
                childrenSelect.each(function(pos,elm)
                {
                    if($(elm).prop('checked')) return false;
                });

            }
            function init(autoIn)
            {
                if(autoIn == true) { autoInit(); }
                //get initial state of both items and sync
                let initFieldsetStateIsHidden = fieldset.hasClass('hide');
                let initToggleStateChecked = (undefined==$(toggleId).attr('checked'))?false:true;


                if(initToggleStateChecked == false && initFieldsetStateIsHidden == false)
                {
                    //niet gechecked dus fieldset verbergen
                    toggleFieldset(fieldset);
                }
                else if(initToggleStateChecked == true && initFieldsetStateIsHidden == true)
                {
                    //wel geckeckt dus wel laten zien dus toggelen = hide weghalen.
                    toggleFieldset(fieldset);
                }
            }

            function toggleFieldset(fieldset){
                fieldset.toggleClass('hide');
                fieldset.children().each(
                    function(pos,el){
                        $(el).toggleClass('hide')
                    }
                );
            }
            $('body').load(init({{ autoInit }}));
        </script>
    {% endblock %}
{% endmacro fieldsetToggle %}